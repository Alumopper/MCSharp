using MCsharp.Exception;
using MCsharp.Type;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace MCsharp
{
    public class Datapack
    {
        /// <summary>
        /// 数据包输出路径
        /// </summary>
        public static string outputPath = "./";

        /// <summary>
        /// 数据包版本
        /// </summary>
        public static int version;

        /// <summary>
        /// 数据包描述
        /// </summary>
        //public static JsonText discription = new JsonText("A datapack generated by MCSharp");
        public static string discription = "A datapack generated by MCSharp";

        /// <summary>
        /// 数据包名字
        /// </summary>
        public static string name = "Unnamed";

        public static Dictionary<string,FuncHolder> directorys = new Dictionary<string, FuncHolder>();

        public FuncHolder this[string s]
        {
            get
            {
                try
                {
                    FuncHolder re = directorys[s];
                    return re;
                }
                catch
                {
                    //创建新的目录
                    FuncHolder drc = new FuncHolder(s);
                    directorys.Add(s, drc);
                    return drc;
                }
            }
        }
        public new static string ToString()
        {
            string qwq = name + "\n\n";
            foreach (var o in directorys)
            {
                qwq += o.Value + "\n";
            }
            return qwq;
        }

        private static int id;
        public static int GetID()
        {
            return id++;
        }
        public static void Create()
        {
            //删除旧数据包
            DirectoryInfo old = new DirectoryInfo(outputPath + "\\" + name);
            if (old.Exists)
            {
                old.Delete(true);
            }
            //生成数据包
            DirectoryInfo func = Directory.CreateDirectory(outputPath + "\\" + name + "\\data\\qwq\\functions"); 
            foreach(KeyValuePair<string,FuncHolder> hs in directorys)
            {
                //生成次级函数目录
                DirectoryInfo qwq = new DirectoryInfo(func.FullName + "\\" + hs.Key);
                qwq.Create();
                foreach(KeyValuePair<string,Function> funcs in hs.Value.functions)
                {
                    //生成函数文件
                    StreamWriter fs = new StreamWriter(File.Create(qwq.FullName + "\\" + funcs.Key + ".mcfunction"));
                    StringBuilder builder = new StringBuilder();
                    foreach(var commands in funcs.Value.commands)
                    {
                        builder.Append(commands.ToString()).AppendLine();
                    }
                    fs.Write(builder);
                    fs.Flush();
                }
            }
            File.WriteAllText(outputPath + "\\" + name + "\\pack.mcmeta","{\r\n    \"pack\": {\r\n        \"description\":\""+discription+"\",\r\n        \"pack_format\": 10\r\n    }\r\n}");
        }
    }
}